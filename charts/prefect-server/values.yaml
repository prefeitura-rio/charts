# prefect-server configuration

# serverVersionTag configures the default tag for prefect server
# images which are used for the apollo, graphql, and towel
# services. If null, this value defaults to `appVersion` but is
# provided here to allow override at chart install time. Each
# service image tag can be overriden individually in their
# configurations but it is not recommended.
# See https://github.com/helm/helm/issues/8194 for details
# on why the `appVersion` cannot be set at install time.
serverVersionTag: "core-1.4.1"

# prefectVersionTag configures the default tag for Prefect Core based
# services, including the agent and default tenant creation job.
# This value is automatically pinned on chart release to the latest
# core version.
prefectVersionTag: "1.4.1"

# prefectAuthProxyVersionTag configures the default tag for the
# Prefect Auth Proxy service. This value is automatically pinned
# on chart release to the latest auth proxy version.
prefectAuthProxyVersionTag: "latest"

# uiVersionTag configures the default tag for the Prefect UI service.
# It is defined here for easy update using `sed` for automation.
# This value is automatically pinned on chart release to the latest
# ui version.
uiVersionTag: "latest"

# includeChartNameInComponents determines if the name of the chart should
# be included in generated component names. By default, it will not
# be included and names will be formatted as {release}-{component}.
# If 'true'', names will be formatted as {release}-{chart}-{compnent}.
# This is useful if this chart is being used as a subchart with names
# that may collide with other objects.
includeChartNameInComponents: false

# imagePullSecrets provides configuration to reference the k8s Secret
# resources the Helm chart's pods can get credentials from to pull
# their images.
imagePullSecrets:
  []
  # - name: "secret_name"

# annotations to merge into all object configurations
# NOTE: These will not apply to the postgresql subchart and must be
# defined within `postgresql` as well if that is desired
annotations: {}

# postgresql configures the backing database
# NOTE: the variables names must remain as is to match the
# bitnami subchart even if the bitnami subchart is not being
# used, these variables are used to create the connection
# string
postgresql:
  auth:
    # postgresql.auth.username defines the username to authenticate
    # with.
    # NOTE: If you are using Azure, this will include an '@'
    # which must be encoded as '%40' for the connection string
    # to work with both Hasura, the GraphQL server, and the
    # Alembic migration manager
    username: prefect
    # postgresql.auth.password sets the password to be used if
    # `existingSecret` is not set. This is the password for
    # `postgresqlUsername` and will be set within the secret at
    # the key `postgresql-password`. This argument is only relevant
    # when using the Postgres database included in the chart.
    # For an external postgres connection, you must create
    # and use `existingSecret` instead of `postgresqlPassword`.
    # postgresqlPassword: use-a-strong-password
    password: prefect
    database: prefect
    postgresPassword: prefect

    # postgresql.auth.existingSecret configures which secret should be referenced
    # for access to the database. If null and `useSubChart` is
    # enabled, the secret will be generated. If using an external
    # postgres service, this value should be set to the name of
    # an existing Kubernetes secret. This secret must contain
    # a key-value pair where the key is `postgresql-password `
    # and the value is your password. For more information,
    # see the "Database" section of the README.
    existingSecret: null

  # externalHostname defines the address to contact an externally
  # managed postgres database instance at. This is not required if
  # `internalPostgres` is `true`
  externalHostname: ""

  # servicePort configures the port that the database should be
  # accessed at
  primary:
    service:
      type: ClusterIP
      ports:
        postgresql: 5432

    initdb:
      user: postgres
      scripts:
        create_pgcrypto.sql: |
          -- create pgcrypto extension, required for Hasura UUID
          CREATE EXTENSION IF NOT EXISTS pgcrypto;
          CREATE EXTENSION IF NOT EXISTS "pg_trgm";
          SET TIME ZONE 'UTC';

    # postgresql.primary.persistence enables a PVC that stores the database between
    # deployments. If making changes to the database deployment, this
    # PVC will need to be deleted for database changes to take effect.
    # This is especially notable when the authentication password
    # changes on redeploys.
    # This is disabled by default because we do not recommend using
    # the subchart deployment for production deployments.
    persistence:
      enabled: false
      size: 8Gi

  # useSubChart determines if a this chart should deploy a
  # user-manager postgres database or use an externally managed
  # postgres instance. If `useSubChart` is `true`, the
  # bitnami/postgresql subchart will be deployed
  useSubChart: true

# prefectConfig allows override of prefect_server/config.toml values
# Values placed here will result in environment variable definitions
# starting with "PREFECT_SERVER__" and will be passed to relevant
# services
prefectConfig:
  # env: "local"
  # debug: "false"
  # queued_runs_returned_limit: "25"
  # hasura:
  #   execute_retry_seconds: "10"
  # logging:
  #   level: "DEBUG"
  #   format: "[%(asctime)s] %(levelname)s - %(name)s | %(message)s"
  # services:
  #   scheduler:
  #     scheduler_loop_seconds: "300"
  #   lazarus:
  #     resurrection_attempt_limit: "3"
  # telemetry:
  #   enabled: "true"

# hasura configures the Prefect hasura deployment and service
# which creates a graphql api from the postgres database
hasura:
  # hasura.image configures the docker image used for hasura
  # and is the only image in the chart that is not hosted by
  # Prefect
  image:
    name: hasura/graphql-engine
    tag: v2.15.2
    pullPolicy: IfNotPresent
    pullSecrets: []
    # - name: "secret_name"

  service:
    # type defines the service type and defaults to ClusterIP
    # because this service does not need to be exposed outside
    # the cluster
    type: ClusterIP
    port: 3000

  labels: {}
  annotations: {}
  podAnnotations: {}
  replicas: 1
  strategy: {}
  podSecurityContext: {}
  securityContext: {}
  env: []
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

  # hpa configures the horizontal pod autoscaler
  hpa:
    enabled: false
    minReplicas: 1
    maxReplicas: 10
    cpuUtilization: 50
    memoryUtilization: 50

# graphql configures the Prefect graphql deployment and service
# which provides a python graphql server on starlette
graphql:
  image:
    name: prefecthq/server
    tag: null
    pullPolicy: Always
    pullSecrets: []
    # - name: "secret_name"

  service:
    type: ClusterIP
    port: 4201

  labels: {}
  annotations: {}
  podAnnotations: {}
  replicas: 1
  strategy: {}
  podSecurityContext: {}
  securityContext: {}
  env: []
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

  init:
    enabled: true
    # init.resources configures resources for the initContainer
    # which upgrades the database
    env: []
    resources: {}
    securityContext: {}

  # hpa configures the horizontal pod autoscaler
  hpa:
    enabled: false
    minReplicas: 1
    maxReplicas: 10
    cpuUtilization: 50
    memoryUtilization: 50

# apollo configures the Prefect apollo deployment and service
# which provides a unified graphql schema for users and the UI
# to interact with
apollo:
  image:
    name: prefecthq/apollo
    tag: null
    pullPolicy: Always
    pullSecrets: []
    # - name: "secret_name"

  options:
    telemetryEnabled: true

  service:
    # type defines the service type and defaults to LoadBalancer
    # to expose the apollo service to users and the UI.
    type: ClusterIP
    port: 4200

  labels: {}
  annotations: {}
  podAnnotations: {}
  replicas: 1
  strategy: {}
  podSecurityContext: {}
  securityContext: {}
  env: []
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

  # hpa configures the horizontal pod autoscaler
  hpa:
    enabled: false
    minReplicas: 1
    maxReplicas: 10
    cpuUtilization: 50
    memoryUtilization: 50

# authproxy configures the Prefect Auth Proxy deployment and service
# which provides a proxy to the Prefect API that handles multi-tenant
# authentication
authproxy:
  image:
    name: ghcr.io/prefeitura-rio/prefect-auth-proxy
    tag: null
    pullPolicy: Always
    pullSecrets: []
    # - name: "secret_name"

  options:
    telemetryEnabled: true

  service:
    # type defines the service type and defaults to LoadBalancer
    # to expose the apollo service to users and the UI.
    type: ClusterIP
    port: 80

  # databaseUrlSecretName defines the name of the secret that
  # contains the database url for the auth proxy. This secret
  # must be created before the auth proxy is deployed. It must
  # contain a single key called DATABASE_URL with a value of
  # the database url.
  databaseUrlSecretName: database-url

  labels: {}
  annotations: {}
  podAnnotations: {}
  replicas: 1
  strategy: {}
  podSecurityContext: {}
  securityContext: {}
  env:
    - name: ALLOW_CREDENTIALS
      value: "true"
    - name: ALLOWED_HEADERS
      value: "*"
    - name: ALLOWED_METHODS
      value: "*"
    - name: ALLOWED_ORIGINS
      value: "*"
    # - name: SENTRY_DSN
    #   value: ""
    # - name: SENTRY_ENVIRONMENT
    #   value: ""
    # - name: ALLOWED_ORIGINS_REGEX
    #   value: ".*"
    # - name: PASSWORD_HASH_ALGORITHM
    #   value: pbkdf2_sha256
    # - name: PASSWORD_HASH_NUMBER_OF_ITERATIONS
    #   value: 60000
    # - name: TIMEZONE
    #   value: America/Sao_Paulo
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

  # hpa configures the horizontal pod autoscaler
  hpa:
    enabled: false
    minReplicas: 1
    maxReplicas: 10
    cpuUtilization: 50
    memoryUtilization: 50


# ui configures the Prefect ui deployment and service
ui:
  image:
    name: ghcr.io/prefeitura-rio/prefect-ui
    tag: null # See `uiVersionTag` instead
    pullPolicy: Always
    pullSecrets: []
    # - name: "secret_name"

  # apolloApiUrl defines the default gateway to the Apollo
  # GraphQL server. This location must be accessible by the
  # user of the API because the browser is making requests
  # (not the ui server)
  apolloApiUrl: http://localhost:8000/proxy/

  service:
    # type defines the service type and defaults to LoadBalancer
    # to expose the ui service to users and the UI.
    type: ClusterIP
    port: 8080

  labels: {}
  annotations: {}
  podAnnotations: {}
  replicas: 1
  strategy: {}
  podSecurityContext: {}
  securityContext: {}
  env: []
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

# towel configures the Prefect towel deployment which provides
# a group of useful services
towel:
  image:
    name: prefecthq/server
    tag: null
    pullPolicy: Always
    pullSecrets: []
    # - name: "secret_name"

  labels: {}
  annotations: {}
  podAnnotations: {}
  replicas: 1
  strategy: {}
  podSecurityContext: {}
  securityContext: {}
  env: []
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

serviceAccount:
  # create specifies whether a service account should be created to be
  # associated with the prefect-server infrastructure
  create: true

  annotations: {}

  # name sets the name of the service account to use
  # If not set and create is true, a name is generated using the
  # prefect-server.nameField template
  name: null

# jobs contain one-time job definitions
jobs:
  # create a tenant so that Agent and UI are immediately usable after installation
  createTenant:
    enabled: false

    # tenant sets the details of the created tenant
    tenant:
      name: default
      slug: default

    # image configures the container image for the job
    image:
      name: prefecthq/prefect
      tag: null
      pullPolicy: Always
      pullSecrets: []
      # - name: "secret_name"

    labels: {}
    annotations: {}
    podSecurityContext: {}
    securityContext: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}
    resources: {}
    # backoffLimit configures the number of retries; needed to wait for the server to become available
    backoffLimit: 10
